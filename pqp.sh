#!/bin/bash

# --- CONFIGURA√á√ÉO ---
# 1. Defina o caminho para o arquivo problem√°tico (deve ser o correto)
SECRET_FILE=".env"
# 2. Defina o conte√∫do do seu novo commit
NEW_COMMIT_MESSAGE="Corrigido: Removida chave de API do hist√≥rico de commits."

# --- AVISO DE SEGURAN√áA ---
echo "=========================================="
echo "üö® ATEN√á√ÉO: ESTE SCRIPT REESCREVE O HIST√ìRICO DO GIT!"
echo "Certifique-se de que a chave de API FOI REMOVIDA manualmente do arquivo: $SECRET_FILE"
echo "E que voc√™ REVOGOU a chave na plataforma OpenAI!"
echo "Pressione [ENTER] para continuar ou Ctrl+C para cancelar."
read

# --- PASSOS DE CORRE√á√ÉO ---

echo "1. Desfazendo o √∫ltimo commit (soft reset)..."
# O --soft mant√©m as mudan√ßas no seu diret√≥rio de trabalho e √°rea de staging
git reset --soft HEAD^

echo "2. Garantindo que o arquivo de segredo n√£o ser√° commitado (.gitignore e git rm --cached)..."
# Adiciona o arquivo .env ao .gitignore (se j√° n√£o estiver l√°)
if ! grep -q "$SECRET_FILE" .gitignore; then
  echo "$SECRET_FILE" >> .gitignore
fi

# Remove o arquivo do rastreamento do Git (ele continua no disco)
git rm --cached $SECRET_FILE

echo "3. Refazendo o commit com o hist√≥rico limpo..."
# Adiciona todos os arquivos restantes ao staging (incluindo o .gitignore atualizado)
git add .
git commit -m "$NEW_COMMIT_MESSAGE"

echo "4. Tentando fazer o push for√ßado..."
# O push for√ßado √© necess√°rio porque o hist√≥rico local foi reescrito.
git push --force

if [ $? -eq 0 ]; then
  echo "‚úÖ Sucesso! O push foi conclu√≠do. O hist√≥rico foi reescrito."
else
  echo "‚ùå Erro! O push falhou novamente. A chave ainda pode estar em commits mais antigos."
  echo "Considere usar 'git rebase -i' para remover segredos de commits mais antigos."
fi